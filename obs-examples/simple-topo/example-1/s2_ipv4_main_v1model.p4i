# 1 "s2_ipv4_main_v1model.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "s2_ipv4_main_v1model.p4"
# 1 "/home/microp4/microp4/extensions/csa/msa-examples/p4c/build/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */




/// Standard error codes.  New error codes can be declared by users.
error {
    NoError, /// No error.
    PacketTooShort, /// Not enough bits in packet for 'extract'.
    NoMatch, /// 'select' expression has no matches.
    StackOutOfBounds, /// Reference to invalid element of a header stack.
    HeaderTooShort, /// Extracting too many bits into a varbit field.
    ParserTimeout /// Parser execution time limit exceeded.
}

extern packet_in {
    /// Read a header from the packet into a fixed-sized header @hdr and advance the cursor.
    /// May trigger error PacketTooShort or StackOutOfBounds.
    /// @T must be a fixed-size header type
    void extract<T>(out T hdr);
    /// Read bits from the packet into a variable-sized header @variableSizeHeader
    /// and advance the cursor.
    /// @T must be a header containing exactly 1 varbit field.
    /// May trigger errors PacketTooShort, StackOutOfBounds, or HeaderTooShort.
    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);
    /// Read bits from the packet without advancing the cursor.
    /// @returns: the bits read from the packet.
    /// T may be an arbitrary fixed-size type.
    T lookahead<T>();
    /// Advance the packet cursor by the specified number of bits.
    void advance(in bit<32> sizeInBits);
    /// @return packet length in bytes.  This method may be unavailable on
    /// some target architectures.
    bit<32> length();
}

extern packet_out {
    /// Write @hdr into the output packet, advancing cursor.
    /// @T can be a header type, a header stack, a header_union, or a struct
    /// containing fields with such types.
    void emit<T>(in T hdr);
}

// TODO: remove from this file, convert to built-in
/// Check a predicate @check in the parser; if the predicate is true do nothing,
/// otherwise set the parser error to @toSignal, and transition to the `reject` state.
extern void verify(in bool check, in error toSignal);

/// Built-in action that does nothing.
action NoAction() {}

/// Standard match kinds for table key fields.
/// Some architectures may not support all these match kinds.
/// Architectures can declare additional match kinds.
match_kind {
    /// Match bits exactly.
    exact,
    /// Ternary match, using a mask.
    ternary,
    /// Longest-prefix match.
    lpm
}
# 2 "s2_ipv4_main_v1model.p4" 2
# 1 "/home/microp4/microp4/extensions/csa/msa-examples/p4c/build/p4include/v1model.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* P4-16 declaration of the P4 v1.0 switch model */




# 1 "/home/microp4/microp4/extensions/csa/msa-examples/p4c/build/p4include/core.p4" 1
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* This is the P4-16 core library, which declares some built-in P4 constructs using P4 */
# 23 "/home/microp4/microp4/extensions/csa/msa-examples/p4c/build/p4include/v1model.p4" 2

match_kind {
    range,
    // Used for implementing dynamic_action_selection
    selector
}

// Are these correct?
@metadata @name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    // The drop and recirculate_port fields are not used at all by the
    // behavioral-model simple_switch software switch as of September
    // 2018, and perhaps never was.  They may be considered
    // deprecated, at least for that P4 target device.  simple_switch
    // uses the value of the egress_spec field to determine whether a
    // packet is dropped or not, and it is recommended to use the
    // P4_14 drop() primitive action, or the P4_16 + v1model
    // mark_to_drop() primitive action, to cause that field to be
    // changed so the packet will be dropped.
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
    //
    // @alias is used to generate the field_alias section of the BMV2 JSON.
    // Field alias creates a mapping from the metadata name in P4 program to
    // the behavioral model's internal metadata name. Here we use it to
    // expose all metadata supported by simple switch to the user through
    // standard_metadata_t.
    //
    // flattening fields that exist in bmv2-ss
    // queueing metadata
    @alias("queueing_metadata.enq_timestamp") bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth") bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta") bit<32> deq_timedelta;
    @alias("queueing_metadata.deq_qdepth") bit<19> deq_qdepth;
    // intrinsic metadata
    @alias("intrinsic_metadata.ingress_global_timestamp") bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.egress_global_timestamp") bit<48> egress_global_timestamp;
    @alias("intrinsic_metadata.lf_field_list") bit<32> lf_field_list;
    @alias("intrinsic_metadata.mcast_grp") bit<16> mcast_grp;
    @alias("intrinsic_metadata.resubmit_flag") bit<32> resubmit_flag;
    @alias("intrinsic_metadata.egress_rid") bit<16> egress_rid;
    /// Indicates that a verify_checksum() method has failed.
    // 1 if a checksum error was found, otherwise 0.
    bit<1> checksum_error;
    @alias("intrinsic_metadata.recirculate_flag") bit<32> recirculate_flag;
    /// Error produced by parsing
    error parser_error;
}

enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}

enum MeterType {
    packets,
    bytes
}

extern counter {
    counter(bit<32> size, CounterType type);
    void count(in bit<32> index);
}

extern direct_counter {
    direct_counter(CounterType type);
    void count();
}

extern meter {
    meter(bit<32> size, MeterType type);
    void execute_meter<T>(in bit<32> index, out T result);
}

extern direct_meter<T> {
    direct_meter(MeterType type);
    void read(out T result);
}

extern register<T> {
    register(bit<32> size);
    void read(out T result, in bit<32> index);
    void write(in bit<32> index, in T value);
}

// used as table implementation attribute
extern action_profile {
    action_profile(bit<32> size);
}

// Get a random number in the range lo..hi
extern void random<T>(out T result, in T lo, in T hi);
// If the type T is a named struct, the name is used
// to generate the control-plane API.
extern void digest<T>(in bit<32> receiver, in T data);

enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}

extern void mark_to_drop();
extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);

extern action_selector {
    action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
    I2E,
    E2E
}

@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}

/**
Verifies the checksum of the supplied data.
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

/**
Verifies the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
If this method detects that a checksum of the data is not correct it
sets the standard_metadata checksum_error bit.
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Checksum type; must be bit<X> type.
@param condition  If 'false' the verification always succeeds.
@param data       Data whose checksum is verified.
@param checksum   Expected checksum of the data; note that is must be a left-value.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void verify_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
/**
Computes the checksum of the supplied data including the payload.
The payload is defined as "all bytes of the packet which were not parsed by the parser".
@param T          Must be a tuple type where all the fields are bit-fields or varbits.
                  The total dynamic length of the fields is a multiple of the output size.
@param O          Output type; must be bit<X> type.
@param condition  If 'false' the checksum is not changed
@param data       Data whose checksum is computed.
@param checksum   Checksum of the data.
@param algo       Algorithm to use for checksum (not all algorithms may be supported).
                  Must be a compile-time constant.
*/
extern void update_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type, in bit<32> session);
extern void clone3<T>(in CloneType type, in bit<32> session, in T data);

extern void truncate(in bit<32> length);

// The name 'standard_metadata' is reserved

// Architecture.
// M should be a struct of structs
// H should be a struct of headers or stacks

parser Parser<H, M>(packet_in b,
                    out H parsedHdr,
                    inout M meta,
                    inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
VerifyChecksum control are: block statements, calls to the
verify_checksum and verify_checksum_with_payload methods,
and return statements. */
control VerifyChecksum<H, M>(inout H hdr,
                             inout M meta);
@pipeline
control Ingress<H, M>(inout H hdr,
                      inout M meta,
                      inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H, M>(inout H hdr,
                     inout M meta,
                     inout standard_metadata_t standard_metadata);

/* The only legal statements in the implementation of the
ComputeChecksum control are: block statements, calls to the
update_checksum and update_checksum_with_payload methods,
and return statements. */
control ComputeChecksum<H, M>(inout H hdr,
                              inout M meta);
@deparser
control Deparser<H>(packet_out b, in H hdr);

package V1Switch<H, M>(Parser<H, M> p,
                       VerifyChecksum<H, M> vr,
                       Ingress<H, M> ig,
                       Egress<H, M> eg,
                       ComputeChecksum<H, M> ck,
                       Deparser<H> dep
                       );
# 3 "s2_ipv4_main_v1model.p4" 2

header msa_byte_h {
    bit<8> data;
}

header csa_indices_h {
    bit<16> pkt_len;
    bit<16> curr_offset;
}

struct msa_packet_struct_t {
    msa_byte_h[34] msa_hdr_stack;
    csa_indices_h indices;
}

struct OneBigSwitchExample_parser_meta_t {
    bool eth_v;
    bit<1> packet_reject;
    bit<16> curr_offset;
}

struct IPv4_parser_meta_t {
    bool ipv4_v;
    bit<1> packet_reject;
    bit<16> curr_offset;
}

struct IPv4_hdr_vop_t {
}

struct OneBigSwitchExample_hdr_vop_t {
}

typedef bit<9> PortId_t;
struct empty_t {
}

struct vxlan_inout_t {
    bit<48> dmac;
    bit<48> smac;
    bit<16> ethType;
}

struct swtrace_inout_t {
    bit<4> ipv4_ihl;
    bit<16> ipv4_total_len;
}

struct mplslr_inout_t {
    bit<16> next_hop;
    bit<16> eth_type;
}

struct vlan_inout_t {
    bit<48> dstAddr;
    bit<16> invlan;
    bit<16> outvlan;
    bit<16> ethType;
}

struct sr6_inout_t {
    bit<16> totalLen;
    bit<8> nexthdr;
    bit<8> hoplimit;
    bit<128> srcAddr;
    bit<128> dstAddr;
}

struct acl_result_t {
    bit<1> hard_drop;
    bit<1> soft_drop;
}

struct l3_inout_t {
    acl_result_t acl;
    bit<16> next_hop;
    bit<16> eth_type;
}

struct ipv4_acl_in_t {
    bit<32> sa;
    bit<32> da;
}

struct ipv6_acl_in_t {
    bit<128> sa;
    bit<128> da;
}

struct ipv4_h {
    bit<8> ihl_version;
    bit<8> diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3> flags;
    bit<13> fragOffset;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdrChecksum;
    bit<32> srcAddr;
    bit<32> dstAddr;
}

struct ipv4_hdr_t {
    ipv4_h ipv4;
}

control IPv4_micro_parser(inout msa_packet_struct_t p, out ipv4_hdr_t hdr, out IPv4_parser_meta_t parser_meta) {
    action micro_parser_init() {
        parser_meta.ipv4_v = false;
        parser_meta.packet_reject = 1w0b0;
        parser_meta.curr_offset = p.indices.curr_offset;
    }
    action i_112_start_0() {
        parser_meta.ipv4_v = true;
        hdr.ipv4.ihl_version = p.msa_hdr_stack[14].data;
        hdr.ipv4.diffserv = p.msa_hdr_stack[15].data;
        hdr.ipv4.totalLen = p.msa_hdr_stack[16].data ++ p.msa_hdr_stack[17].data;
        hdr.ipv4.identification = p.msa_hdr_stack[18].data ++ p.msa_hdr_stack[19].data;
        hdr.ipv4.flags = p.msa_hdr_stack[20].data[7:5];
        hdr.ipv4.fragOffset = p.msa_hdr_stack[20].data[4:0] ++ p.msa_hdr_stack[21].data;
        hdr.ipv4.ttl = p.msa_hdr_stack[22].data;
        hdr.ipv4.protocol = p.msa_hdr_stack[23].data;
        hdr.ipv4.hdrChecksum = p.msa_hdr_stack[24].data ++ p.msa_hdr_stack[25].data;
        hdr.ipv4.srcAddr = p.msa_hdr_stack[26].data ++ (p.msa_hdr_stack[27].data ++ (p.msa_hdr_stack[28].data ++ p.msa_hdr_stack[29].data));
        hdr.ipv4.dstAddr = p.msa_hdr_stack[30].data ++ (p.msa_hdr_stack[31].data ++ (p.msa_hdr_stack[32].data ++ p.msa_hdr_stack[33].data));
        p.indices.curr_offset = 16w272;
    }
    table parser_tbl {
        key = {
            p.indices.curr_offset: exact;
        }
        actions = {
            i_112_start_0();
            NoAction();
        }
        const entries = {
                        16w112 : i_112_start_0();

        }

        const default_action = NoAction();
    }
    apply {
        micro_parser_init();
        parser_tbl.apply();
    }
}

control IPv4_micro_control(inout ipv4_hdr_t hdr, out bit<16> nexthop) {
    @name("IPv4.micro_control.process") action process(bit<16> nh) {
        nexthop = nh;
    }
    @name("IPv4.micro_control.default_act") action default_act() {
        nexthop = 16w0;
    }
    @name("IPv4.micro_control.ipv4_lpm_tbl") table ipv4_lpm_tbl_0 {
        key = {
            hdr.ipv4.dstAddr : exact @name("hdr.ipv4.dstAddr") ;
            hdr.ipv4.diffserv: ternary @name("hdr.ipv4.diffserv") ;
        }
        actions = {
            process();
            default_act();
        }
        const entries = {
                        (32w167772417, default) : process(16w1);

                        (32w167772673, default) : process(16w2);

                        (32w167772929, default) : process(16w3);

                        (32w167773185, default) : process(16w4);

        }

        default_action = default_act();
    }
    apply {
        ipv4_lpm_tbl_0.apply();
    }
}

control IPv4_micro_deparser(inout msa_packet_struct_t p, in ipv4_hdr_t h, in IPv4_parser_meta_t parser_meta) {
    action set_offset_112() {
        p.indices.curr_offset = 16w112;
    }
    action ipv4_14_34() {
    }
    action set_offset_112_ipv4_14_34() {
        ipv4_14_34();
        set_offset_112();
    }
    table deparser_tbl {
        key = {
            parser_meta.curr_offset: exact;
            parser_meta.ipv4_v : exact;
        }
        actions = {
            set_offset_112();
            ipv4_14_34();
            set_offset_112_ipv4_14_34();
            NoAction();
        }
        const entries = {
                        (16w112, false) : set_offset_112();

                        (16w112, true) : set_offset_112_ipv4_14_34();

        }

        const default_action = NoAction();
    }
    apply {
        deparser_tbl.apply();
    }
}

control IPv4(inout msa_packet_struct_t mp, out bit<16> out_param) {
    IPv4_micro_parser() IPv4_micro_parser_inst;
    IPv4_micro_control() IPv4_micro_control_inst;
    IPv4_micro_deparser() IPv4_micro_deparser_inst;
    ipv4_hdr_t ipv4_hdr_t_var;
    IPv4_parser_meta_t IPv4_parser_meta_t_var;
    apply {
        IPv4_micro_parser_inst.apply(mp, ipv4_hdr_t_var, IPv4_parser_meta_t_var);
        IPv4_micro_control_inst.apply(ipv4_hdr_t_var, out_param);
        IPv4_micro_deparser_inst.apply(mp, ipv4_hdr_t_var, IPv4_parser_meta_t_var);
    }
}

struct ethernet_h {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> ethType;
}

struct hdr_t {
    ethernet_h eth;
}

control OneBigSwitchExample_micro_parser(inout msa_packet_struct_t p, out hdr_t hdr, out OneBigSwitchExample_parser_meta_t parser_meta) {
    action micro_parser_init() {
        parser_meta.eth_v = false;
        parser_meta.packet_reject = 1w0b0;
        p.indices.curr_offset = 16w0;
        parser_meta.curr_offset = 16w0;
    }
    action i_0_start_0() {
        parser_meta.eth_v = true;
        hdr.eth.dstAddr = p.msa_hdr_stack[0].data ++ (p.msa_hdr_stack[1].data ++ (p.msa_hdr_stack[2].data ++ (p.msa_hdr_stack[3].data ++ (p.msa_hdr_stack[4].data ++ p.msa_hdr_stack[5].data))));
        hdr.eth.srcAddr = p.msa_hdr_stack[6].data ++ (p.msa_hdr_stack[7].data ++ (p.msa_hdr_stack[8].data ++ (p.msa_hdr_stack[9].data ++ (p.msa_hdr_stack[10].data ++ p.msa_hdr_stack[11].data))));
        hdr.eth.ethType = p.msa_hdr_stack[12].data ++ p.msa_hdr_stack[13].data;
        p.indices.curr_offset = 16w112;
    }
    apply {
        micro_parser_init();
        i_0_start_0();
    }
}

control OneBigSwitchExample_micro_control(inout msa_packet_struct_t mp, inout standard_metadata_t im, inout hdr_t hdr) {
    @name(".NoAction") action NoAction_0() {
    }
    bit<16> nh_0;
    @name("OneBigSwitchExample.micro_control.ipv4_i") IPv4() ipv4_i_0;
    @name("OneBigSwitchExample.micro_control.forward") action forward(bit<48> dstAddr, bit<48> srcAddr, PortId_t port) {
        hdr.eth.dstAddr = dstAddr;
        hdr.eth.srcAddr = srcAddr;
        im.egress_spec = port;
    }
    @name("OneBigSwitchExample.micro_control.forward_tbl") table forward_tbl_0 {
        key = {
            nh_0: exact @name("nh") ;
        }
        actions = {
            forward();
            @defaultonly NoAction_0();
        }
        const entries = {
                        16w1 : forward(48w0x1, 48w0xaabb000001, 9w1);

                        16w2 : forward(48w0x2, 48w0xaabb000001, 9w2);

                        16w3 : forward(48w0x3, 48w0xaabb000001, 9w3);

                        16w4 : forward(48w0x4, 48w0xaabb000001, 9w4);

        }

        default_action = NoAction_0();
    }
    apply {
        nh_0 = 16w0;
        if (hdr.eth.ethType == 16w0x800)
            ipv4_i_0.apply(mp, nh_0);
        forward_tbl_0.apply();
    }
}

control OneBigSwitchExample_micro_deparser(inout msa_packet_struct_t p, in hdr_t hdr, in OneBigSwitchExample_parser_meta_t parser_meta) {
    action eth_0_14() {
        p.msa_hdr_stack[0].data = hdr.eth.dstAddr[47:40];
        p.msa_hdr_stack[1].data = hdr.eth.dstAddr[39:32];
        p.msa_hdr_stack[2].data = hdr.eth.dstAddr[31:24];
        p.msa_hdr_stack[3].data = hdr.eth.dstAddr[23:16];
        p.msa_hdr_stack[4].data = hdr.eth.dstAddr[15:8];
        p.msa_hdr_stack[5].data = hdr.eth.dstAddr[7:0];
        p.msa_hdr_stack[6].data = hdr.eth.srcAddr[47:40];
        p.msa_hdr_stack[7].data = hdr.eth.srcAddr[39:32];
        p.msa_hdr_stack[8].data = hdr.eth.srcAddr[31:24];
        p.msa_hdr_stack[9].data = hdr.eth.srcAddr[23:16];
        p.msa_hdr_stack[10].data = hdr.eth.srcAddr[15:8];
        p.msa_hdr_stack[11].data = hdr.eth.srcAddr[7:0];
    }
    table deparser_tbl {
        key = {
            parser_meta.eth_v: exact;
        }
        actions = {
            eth_0_14();
            NoAction();
        }
        const entries = {
                        true : eth_0_14();

        }

        const default_action = NoAction();
    }
    apply {
        deparser_tbl.apply();
    }
}

control OneBigSwitchExample(inout msa_packet_struct_t mp, inout standard_metadata_t im) {
    OneBigSwitchExample_micro_parser() OneBigSwitchExample_micro_parser_inst;
    OneBigSwitchExample_micro_control() OneBigSwitchExample_micro_control_inst;
    OneBigSwitchExample_micro_deparser() OneBigSwitchExample_micro_deparser_inst;
    hdr_t hdr_t_var;
    OneBigSwitchExample_parser_meta_t OneBigSwitchExample_parser_meta_t_var;
    apply {
        OneBigSwitchExample_micro_parser_inst.apply(mp, hdr_t_var, OneBigSwitchExample_parser_meta_t_var);
        OneBigSwitchExample_micro_control_inst.apply(mp, im, hdr_t_var);
        OneBigSwitchExample_micro_deparser_inst.apply(mp, hdr_t_var, OneBigSwitchExample_parser_meta_t_var);
    }
}

struct csa_user_metadata_t {
    empty_t in_param;
    empty_t out_param;
    empty_t inout_param;
}

parser csa_v1model_parser(packet_in pin, out msa_packet_struct_t mp, inout csa_user_metadata_t csa_um, inout standard_metadata_t csa_sm) {
    state start {
        mp.indices.setValid();
        mp.indices.pkt_len = 16w1;
        verify(csa_sm.packet_length >= 32w14, error.PacketTooShort);
        transition parse_byte;
    }
    state parse_byte {
        pin.extract(mp.msa_hdr_stack.next);
        mp.indices.pkt_len = mp.indices.pkt_len + 16w1;
        transition select(mp.indices.pkt_len <= (bit<16>)csa_sm.packet_length && mp.indices.pkt_len <= 16w272) {
            false: accept;
            true: parse_byte;
        }
    }
}

control csa_v1model_deparser(packet_out po, in msa_packet_struct_t mp) {
    apply {
        po.emit(mp.msa_hdr_stack);
    }
}

control csa_ingress(inout msa_packet_struct_t mp, inout csa_user_metadata_t csa_um, inout standard_metadata_t csa_sm) {
    OneBigSwitchExample() OneBigSwitchExample_inst;
    apply {
        OneBigSwitchExample_inst.apply(mp, csa_sm);
    }
}

control csa_egress(inout msa_packet_struct_t mp, inout csa_user_metadata_t csa_um, inout standard_metadata_t csa_sm) {
    apply {
    }
}

control csa_verify_checksum(inout msa_packet_struct_t mp, inout csa_user_metadata_t csa_um) {
    apply {
    }
}

control csa_compute_checksum(inout msa_packet_struct_t mp, inout csa_user_metadata_t csa_um) {
    apply {
    }
}

V1Switch(csa_v1model_parser(), csa_verify_checksum(), csa_ingress(), csa_egress(), csa_compute_checksum(), csa_v1model_deparser()) main;
