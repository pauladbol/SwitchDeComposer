#include"msa.up4"
#include"../../exe_common.up4"

header ipv4_h {
  bit<8> ihl_version;
  bit<8> diffserv;
  bit<16> totalLen;
  bit<16> identification;
  bit<3> flags;
  bit<13> fragOffset;
  bit<8> ttl;
  bit<8> protocol;
  bit<16> hdrChecksum;
  bit<32> srcAddr;
  bit<32> dstAddr; 
}

struct ipv4_hdr_t {
  ipv4_h ipv4;
}

cpackage IPv4 : implements Unicast<ipv4_hdr_t, empty_t, empty_t, bit<16>, empty_t> {

  parser micro_parser(extractor ex, pkt p, im_t im, out ipv4_hdr_t hdr, 
                      inout empty_t meta, in empty_t ia, inout empty_t ioa) {
    state start {
      ex.extract(p, hdr.ipv4);
      transition accept;
    }
  }

  control micro_control(pkt p, im_t im, inout ipv4_hdr_t hdr, inout empty_t m,
                          in empty_t e, out bit<16> nexthop, 
                          inout empty_t ioa) { // nexthop out arg
    
    const bit<32> h1_ipv4 = 167772417; // 10.0.1.1
    const bit<32> h2_ipv4 = 167772673; // 10.0.2.1
    const bit<32> h3_ipv4 = 167772929; // 10.0.3.1
    const bit<32> h4_ipv4 = 167773185; // 10.0.4.1

    const bit<16> eth1 = 1;
    const bit<16> eth2 = 2;
    const bit<16> eth3 = 3;
    const bit<16> eth4 = 4;

    action process(bit<16> nh) {
      nexthop = nh;
    }
    action default_act() {
      nexthop = 0; 
    }

    table ipv4_lpm_tbl {
      key = { 
        hdr.ipv4.dstAddr : exact; 
        hdr.ipv4.diffserv : ternary;
      } 
      actions = { 
        process; 
        default_act;
      }
      const entries = {
        // v1model mininet suitable entries
        (h1_ipv4, _): process(eth1);
        (h2_ipv4, _): process(eth2);
        (h3_ipv4, _): process(eth3);
        (h4_ipv4, _): process(eth4);
      }
      default_action = default_act;

    }

    apply { 
      ipv4_lpm_tbl.apply();
    }
  }

  control micro_deparser(emitter em, pkt p, in ipv4_hdr_t h) {
    apply { 
      em.emit(p, h.ipv4); 
    }
  }
}
